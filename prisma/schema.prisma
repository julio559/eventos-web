generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Partner {
  id             Int      @id @default(autoincrement()) @map("id")
  companyName    String   @map("company_name") @db.VarChar(150)
  tradeName      String?  @map("trade_name") @db.VarChar(150)
  cnpj           String?  @db.VarChar(32)
  contactName    String?  @map("contact_name") @db.VarChar(120)
  email          String   @unique @db.VarChar(190)
  phone          String?  @db.VarChar(40)
  logoUrl        String?  @map("logo_url") @db.VarChar(300)
  passwordHash   String   @map("password_hash") @db.VarChar(255)
  latitude       Decimal  @db.Decimal(9, 6)
  longitude      Decimal  @db.Decimal(9, 6)
  addressLine    String?  @map("address_line") @db.VarChar(200)
  addressCity    String?  @map("address_city") @db.VarChar(100)
  city           String?  @db.VarChar(100)
  addressState   String?  @map("address_state") @db.VarChar(100)
  state          String?  @db.VarChar(100)
  addressZip     String?  @map("address_zip") @db.VarChar(20)
  isVerified     Boolean  @default(false) @map("is_verified")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")

  events         Event[]
  reservations   RestaurantReservation[]
  reviews        RestaurantReview[]
  subscriptions  PartnerSubscription[]
  promotions     EventPromotion[]

  @@map("partners")
}

model Event {
  id              Int       @id @default(autoincrement()) @map("id")
  partnerId       Int       @map("partner_id")
  title           String    @db.VarChar(180)
  slug            String    @unique @db.VarChar(220)
  description     String?   @db.MediumText
  startsAt        DateTime  @map("starts_at")
  endsAt          DateTime? @map("ends_at")
  timezone        String    @default("America/Sao_Paulo") @db.VarChar(50)
  venueName       String?   @map("venue_name") @db.VarChar(180)
  venueAddress    String?   @map("venue_address") @db.VarChar(220)
  venueCity       String?   @map("venue_city") @db.VarChar(100)
  venueState      String?   @map("venue_state") @db.VarChar(100)
  venueLatitude   Decimal   @map("venue_latitude") @db.Decimal(9, 6)
  venueLongitude  Decimal   @map("venue_longitude") @db.Decimal(9, 6)
  isPaid          Boolean   @default(false) @map("is_paid")
  priceMinCents   Int?      @map("price_min_cents")
  priceMaxCents   Int?      @map("price_max_cents")
  visibility      String    @default("draft") @db.VarChar(20)
  isApproved      Boolean   @default(false) @map("is_approved")
  coverImageUrl   String?   @map("cover_image_url") @db.VarChar(300)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  partner         Partner   @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  categories      EventCategory[]
  comments        EventComment[]
  reviews         EventReview[]
  photos          EventPhoto[]
  promotions      EventPromotion[]
  menuSections    RestaurantMenuSection[]

  @@map("events")
}

model Category {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar(100)
  slug   String @unique @db.VarChar(120)

  events EventCategory[]

  @@map("categories")
}

model EventCategory {
  eventId    Int @map("event_id")
  categoryId Int @map("category_id")

  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@id([eventId, categoryId])
  @@map("event_categories")
}

model EventComment {
  id         Int      @id @default(autoincrement())
  eventId    Int      @map("event_id")
  userId     Int?     @map("user_id")
  userName   String?  @map("user_name") @db.VarChar(120)
  userAvatar String?  @map("user_avatar") @db.VarChar(1000)
  text       String   @db.Text
  likes      Int      @default(0)
  replies    Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_comments")
}

model EventReview {
  id         Int      @id @default(autoincrement())
  eventId    Int      @map("event_id")
  userId     Int?     @map("user_id")
  userName   String?  @map("user_name") @db.VarChar(120)
  userAvatar String?  @map("user_avatar") @db.VarChar(1000)
  rating     Int      @db.TinyInt
  text       String?  @db.Text
  likes      Int      @default(0)
  replies    Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_reviews")
}

model EventPhoto {
  id        Int      @id @default(autoincrement())
  eventId   Int      @map("event_id")
  userId    Int?     @map("user_id")
  photoUrl  String   @map("photo_url") @db.VarChar(255)
  caption   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_photos")
}

model EventPromotion {
  id        Int      @id @default(autoincrement())
  eventId   Int      @map("event_id")
  partnerId Int      @map("partner_id")
  source    String   @default("plan")
  weight    Int      @default(0)
  startsAt  DateTime @map("starts_at")
  endsAt    DateTime? @map("ends_at")
  createdAt DateTime @default(now()) @map("created_at")

  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@map("event_promotions")
}

model RestaurantReservation {
  id         Int      @id @default(autoincrement())
  partnerId  Int      @map("partner_id")
  userId     Int?     @map("user_id")
  name       String?  @db.VarChar(120)
  phone      String?  @db.VarChar(40)
  people     Int      @default(1)
  reservedAt DateTime @map("reserved_at")
  status     String   @default("pending")
  notes      String?  @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@map("restaurant_reservations")
}

model RestaurantReview {
  id         Int      @id @default(autoincrement())
  partnerId  Int      @map("partner_id")
  userId     Int?     @map("user_id")
  userName   String   @map("user_name") @db.VarChar(120)
  userAvatar String?  @map("user_avatar") @db.VarChar(500)
  rating     Int      @db.TinyInt
  text       String?  @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@map("restaurant_reviews")
}

model RestaurantMenuSection {
  id        Int      @id @default(autoincrement())
  eventId   Int      @map("event_id")
  title     String   @db.VarChar(120)
  sortOrder Int      @default(0) @map("sort_order")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  items RestaurantMenuItem[]

  @@map("restaurant_menu_sections")
}

model RestaurantMenuItem {
  id              Int      @id @default(autoincrement())
  eventId         Int      @map("event_id")
  sectionId       Int      @map("section_id")
  name            String   @db.VarChar(150)
  description     String?  @db.Text
  priceCents      Int      @default(0) @map("price_cents")
  imageUrl        String?  @map("image_url") @db.VarChar(300)
  isFeatured      Boolean  @default(false) @map("is_featured")
  ingredientsJson Json?    @map("ingredients_json")
  allergensJson   Json?    @map("allergens_json")
  isActive        Boolean  @default(true) @map("is_active")
  sortOrder       Int      @default(0) @map("sort_order")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  section RestaurantMenuSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("restaurant_menu_items")
}

model PartnerPlan {
  id                 Int      @id @default(autoincrement())
  name               String   @db.VarChar(100)
  priceMonthlyCents  Int      @default(0) @map("price_monthly_cents")
  maxActiveEvents    Int      @default(10) @map("max_active_events")
  highlightBadge     Boolean  @default(false) @map("highlight_badge")
  priorityWeight     Int      @default(0) @map("priority_weight")
  featuresJson       Json?    @map("features_json")
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")

  subscriptions PartnerSubscription[]

  @@map("partner_plans")
}

model PartnerSubscription {
  id        Int      @id @default(autoincrement())
  partnerId Int      @map("partner_id")
  planId    Int      @map("plan_id")
  status    String   @default("active")
  startDate DateTime @map("start_date") @db.Date
  endDate   DateTime? @map("end_date") @db.Date
  autoRenew Boolean  @default(true) @map("auto_renew")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  partner Partner     @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  plan    PartnerPlan @relation(fields: [planId], references: [id], onDelete: Restrict)

  @@map("partner_subscriptions")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(120)
  email        String    @unique @db.VarChar(190)
  phone        String?   @db.VarChar(40)
  birthDate    DateTime? @map("birth_date") @db.Date
  locationText String?   @map("location_text") @db.VarChar(180)
  passwordHash String    @map("password_hash") @db.VarChar(255)
  status       String    @default("active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  @@map("users")
}
